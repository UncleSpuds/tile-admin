#!/bin/bash
RGBSwitches="-b 1 -b 2 -b 3"
CIRSwitches="-b 4 -b 2 -b 1"


pause(){
        read -p "Hit [ENTER] to go back to the previous menu.  I'll wait here..."
}

pause2() {
	read -p "Hit [ENTER] to start tiling, or Q to Exit...." -n 1 -r
}

get-max-z() {
clear
echo "What is the maximum zoom level you would like to tile?"
echo ""
echo "Explanation of Zoom Levels Here"
echo ""
echo -n "Please enter the maximum zoom level> "
read maxz
echo -e ""
read -p "Use maximum zoom level $maxz ?"
 if [[  ! $REPLY =~ ^[Yy]$ ]]; then
	printf "\nRestarting....\n"
	sleep 1
	get-max-z;
	else
	printf "\nContinuing...\n"
	sleep 1
	tile-rgb-then-cir-then-ndvi;
fi
}


get-project-projection() {
clear
echo -e "Please provide the projection for $SITENAME, using only the NUMBERS"
echo -e ""
echo -e "Example: 3417"
echo -e ""
echo -n "Enter the projection here> "
read projection
echo -e ""
read -p "Use projection EPSG:"$projection" ?"
 if [[  ! $REPLY =~ ^[Yy]$ ]]; then
	printf "\nRestarting....\n"
	sleep 1
	get-project-projection;
	else
	printf "\nContinuing...\n"
	sleep 1
	get-max-z;
fi
}


tile-rgb-then-cir-then-ndvi() {
clear
echo -e "In this step, the script will put jobs into SCREEN mode.  You will need to"
echo -e "understand how to operate SCREEN in order to monitor jobs."
echo -e ""
echo -e "Disconnect from a screen    :  Press and hold CTRL and press A then D"
echo -e "Move to the next screen     :"
echo -e "See a menu of active screens:"
echo -e ""
echo -e ""
screen -dmS "$SITENAME"_RGB "cd /var/www/mapproxy; sudo python /usr/local/bin/mapslicer.py -r bilinear -f hybrid -s EPSG:$projection -z 0-$maxz data_$client/"$PROJECTYEAR"_season"$PROJECTSEASON"/"$rgbtilepath"/rgbtemp.vrt tiles/$client/"$SITENAME"_rgb"
screen -dmS "$SITENAME"_CIR "cd /var/www/mapproxy; sudo python /usr/local/bin/mapslicer.py -r bilinear -f hybrid -s EPSG:$projection -z 0-$maxz data_$client/"$PROJECTYEAR"_season"$PROJECTSEASON"/"$rgbtilepath"/cirtemp.vrt tiles/$client/"$SITENAME"_cir"
}


create-rgb-cir-mosaic-and-crop-to-shapefile() {
clear
echo -e "I will now create the mosaics for the RGB and CIR imagery and then"
echo -e "crop them all to the shapefile.  Please stand by...."
echo -e ""
sleep 2
cd /var/www/mapproxy
echo -e "Creating RGB Mosaic..."
sleep 1
sudo gdalbuildvrt $RGBSwitches data_$client/"$PROJECTYEAR"_season"$PROJECTSEASON"/"$rgbtilepath"/rgb.vrt data_$client/"$PROJECTYEAR"_season"$PROJECTSEASON"/"$rgbtilepath"/*."$inputfiletype"
sleep 1
echo -e ""
echo -e " "
echo -e "Cropping RGB Mosaic to Shapefile $shapefilename..."
sudo gdalwarp -of vrt -cutline data_$client/"$PROJECTYEAR"_season"$PROJECTSEASON"/shp/$shapefilename -crop_to_cutline -dstalpha -multi data_$client/"$PROJECTYEAR"_season"$PROJECTSEASON"/"$rgbtilepath"/rgb.vrt data_$client/"$PROJECTYEAR"_season"$PROJECTSEASON"/"$rgbtilepath"/rgbtemp.vrt
echo ""
echo ""
echo -e "Creating CIR Mosaic..."
sleep 1
sudo gdalbuildvrt $CIRSwitches data_$client/"$PROJECTYEAR"_season"$PROJECTSEASON"/"$cirtilepath"/cir.vrt data_$client/"$PROJECTYEAR"_season"$PROJECTSEASON"/"$cirtilepath"/*."$inputfiletype"
sleep 1
echo -e " "
echo -e " "
echo -e "Cropping CIR Mosaic to Shapefile $shapefilename..."
sudo gdalwarp -of vrt -cutline data_$client/"$PROJECTYEAR"_season"$PROJECTSEASON"/shp/$shapefilename -crop_to_cutline -dstalpha -multi data_$client/"$PROJECTYEAR"_season"$PROJECTSEASON"/"$cirtilepath"/cir.vrt data_$client/"$PROJECTYEAR"_season"$PROJECTSEASON"/"$cirtilepath"/cirtemp.vrt
echo ""
echo ""
pause2;
get-project-projection;
}



get-shape-file() {
echo -e "\e[92mPlease enter the name of the shape file.  CAPITALIZATION COUNTS!"
echo ""
echo "Hint: /var/www/mapproxy/data_$client/"$PROJECTYEAR"_season"$PROJECTSEASON"/shp"
echo "is the assumed SHP file directory based on previous answers."
echo ""
echo -e "If you do not know the name, press Q to quit until you have the name."
echo ""
read shapefilename
if [ "$shapefilename" == "Q" ]; then
        echo "Exiting this module... chicken."
        sleep 1
        pause
        exit
elif [ "$shapefilename" == "q" ]; then
        echo "Exiting this module... chicken."
        sleep 1
        pause
        exit
else
	if [ -e "/var/www/mapproxy/data_$client/"$PROJECTYEAR"_season"$PROJECTSEASON"/shp/$shapefilename" ]; then
	rgbaction;
else
	echo "The shapefile you entered does not exist at the path.  Please try again."
	pause;
	get-shape-file;
fi
fi
}




check-cir-path() {
echo "CIR Input Tile Path"
echo ""
echo ""
echo "Hint: /var/www/mapproxy/data_$client/"$PROJECTYEAR"_season"$PROJECTSEASON"/ is assumed"
echo "because of your previous entries."
echo ""
echo "Example:  AgPerformance"
echo ""
echo ""
echo -e "\e[92mPlease enter the path to the CIR \e[92mimages you wish to tile: \e[0m"
read cirtilepath
if [ "$cirtilepath" == "Q" ]; then
	echo "Exiting this module... chicken."
	sleep 1
	pause;
	exit
elif [ "$cirtilepath" == "q" ]; then
	echo "Exiting this module... chicken."
	sleep 1
	pause;
	exit
else
test -n "$(find /var/www/mapproxy/data_$client/"$PROJECTYEAR"_season"$PROJECTSEASON"/"$cirtilepath" -maxdepth 1 -name "*.$inputfiletype" -print -quit)"
        if [ "$?" == "0" ]; then
	get-shape-file;
else
        does-not-exist;
fi
fi
}


printcirmenu() {
echo -e "1) Change the project year"
echo -e "2) Change the project season"
echo -e "3) Change the input file type"
echo -e "4) Change the client name"
echo -e "5) Change the Site Name"
echo -e "6) Change the command switches"
echo -e "7) Add ADDITIONAL command switches"
echo ""
echo -e "0) Create mosaics and cut them to shapefile."
echo -e "Q) Quit"
echo ""
echo -n "Make your selection here. > "
cirmenu;
}



cirmenu() {
read selection
case $selection in
        1) echo "Changing Project Year....";
                read -p "What would you like to change the project year to? " -n 2 -r;
                PROJECTYEAR=$REPLY;
                ciraction;
                ;;
        2) echo "Changing Project Season....";
                read -p "What would you like to change the project season to? " -n 2 -r;
                PROJECTSEASON=$REPLY;
                ciraction;
                ;;
        3) echo "Changing Project Input File Type....";
                read -p "What would you like to change the input filetype to? " -r;
                inputfiletype=$REPLY;
                ciraction;
                ;;
        4) echo "Changing Client Name....";
                read -p "What would you like to change the client name to? " -r;
                client=$REPLY;
                ciraction;
                ;;
        5) echo "Changing Site Name....";
                read -p "What would you like to change the site name to? " -r;
                SITENAME=$REPLY;
                ciraction;
                ;;
        6) echo "Changing Command Switches....";
                read -p "What would you like to change the command switches to? " -r;
                CIRSwitches=$REPLY;
                ciraction;
                ;;
        7) echo "Adding ADDITIONAL Command Switches....";
                read -p "What other command switches would you like to add? " -r;
                CIRSwitches=$CIRSwitches" $REPLY";
                ciraction;
                ;;
        0) echo "Continuing to Create RGB and CIR Mosaic and Cut to Shapefile....";
		sleep 1; 
                create-rgb-cir-mosaic-and-crop-to-shapefile;
                ;;
	Q) echo "Exiting this module....";
		sleep 1;
		exit;
		;;
	*) echo "Please make a valid choice....";
		sleep 1;
		ciraction;
		;;
        esac
}

ciraction() {
clear
echo "Getting ready to put your entries into action.  Please review the options, and press"
echo "the corresponding button in order to make a change."
echo ""
echo "CIR Mosaic Command:"
echo ""
echo "sudo gdalbuildvrt $CIRSwitches data_$client/"$PROJECTYEAR"_season"$PROJECTSEASON"/$SITENAME/cir.vrt data_$client/"$PROJECTYEAR"_season"$PROJECTSEASON"/$SITENAME/*.$inputfiletype"
echo ""
echo "Press a menu option below to change the command line."
echo ""
printcirmenu;
}





printrgbmenu() {
echo -e "1) Change the project year"
echo -e "2) Change the project season"
echo -e "3) Change the input file type"
echo -e "4) Change the client name"
echo -e "5) Change the Site Name"
echo -e "6) Change the command switches"
echo -e "7) Add ADDITIONAL command switches"
echo ""
echo -e "0) Continue with this command line"
echo -e "Q) Quit This Module"
echo ""
echo -n "Make your selection here. > "
rgbmenu;
}



rgbmenu() {
read selection
case $selection in
	1) echo "Changing Project Year....";
		read -p "What would you like to change the project year to? " -n 2 -r;
		PROJECTYEAR=$REPLY;
		rgbaction;
		;;
	2) echo "Changing Project Season....";
		read -p "What would you like to change the project season to? " -n 2 -r;
		PROJECTSEASON=$REPLY;
		rgbaction;
		;;
	3) echo "Changing Project Input File Type....";
		read -p "What would you like to change the input filetype to? " -r;
		inputfiletype=$REPLY;
		rgbaction;
		;;
	4) echo "Changing Client Name....";
		read -p "What would you like to change the client name to? " -r;
		client=$REPLY;
		rgbaction;
		;;
	5) echo "Changing Site Name....";
		read -p "What would you like to change the site name to? " -r;
		SITENAME=$REPLY;
		rgbaction;
		;;
	6) echo "Changing Command Switches....";
		read -p "What would you like to change the command switches to? " -r;
		RGBSwitches=$REPLY;
		rgbaction;
		;;
	7) echo "Adding ADDITIONAL Command Switches....";
		read -p "What other command switches would you like to add? " -r;
		RGBSwitches=$RGBSwitches" $REPLY";
		rgbaction;
		;;
	0) echo "Continuing to CIR Command Display....";
		ciraction;
		;;
	Q) echo "Exiting this module....";
		sleep 1;
		exit;
		;;
	*) echo "Please make a valid choice....";
		sleep 1;
		rgbaction;
		;;
	esac
}

rgbaction() {
clear
echo "Getting ready to put your entries into action.  Please review the options, and press"
echo "the corresponding button in order to make a change."
echo ""
echo "RGB Mosaic Command:"
echo ""
echo "sudo gdalbuildvrt $RGBSwitches data_$client/"$PROJECTYEAR"_season"$PROJECTSEASON"/$SITENAME/rgb.vrt data_$client/"$PROJECTYEAR"_season"$PROJECTSEASON"/$SITENAME/*.$inputfiletype"
echo ""
echo "Press a menu option below to change the command line."
echo ""
printrgbmenu;
}


getrgbtilepath() {
clear
echo "RGB Input Tile Path"
echo ""
echo ""
echo "Hint: /var/www/mapproxy/data_$client/"$PROJECTYEAR"_season"$PROJECTSEASON"/ is assumed"
echo "because of your previous entries."
echo ""
echo "Example:  AgPerformance"
echo ""
echo ""
echo -e "\e[92mPlease enter the path to the \e[91mR\e[92mG\e[36mB \e[92mimages you wish to tile: \e[0m"
read rgbtilepath
if [ "$rgbtilepath" == "Q" ]; then
	echo "Exiting this module... chicken."
	sleep 1
	pause;
	exit
elif [ "$rgbtilepath" == "q" ]; then
	echo "Exiting this module... chicken."
	sleep 1
	pause;
	exit
else
test -n "$(find /var/www/mapproxy/data_$client/"$PROJECTYEAR"_season"$PROJECTSEASON"/"$rgbtilepath" -maxdepth 1 -name "*.$inputfiletype" -print -quit)"
	if [ "$?" == "0" ]; then
	check-cir-path;
else
	does-not-exist;
fi
fi
}

express-input-file-type() {
clear
echo "Input File Type"
echo ""
echo ""
echo "This module assumes you know the location of the data to be tiled.  Your"
echo "responses will be checked to make sure that the data is actually there.  You"
echo "should note, this script will NOT check to see if you have entered the CORRECT"
echo "data, it will only check to see that it is, in fact, being provided some."
echo ""
echo ""
echo "If you are uncertain that you have the correct path to the data to be tiled,"
echo "you should press Q immediately and check your path."
echo ""
echo ""
echo -e "\033[5mIf at ANY point you are unable to answer a question properly at a prompt,  the" 
echo -e "\033[5mbest policy is to select Q and exit to the main menu until you can answer all"
echo -e "\033[5mquestions. with 100% accuracy.\033[0m"
echo ""
echo ""
echo -e "\e[92mPlease tell me the input file type (tif, jpg, gif) USE LOWERCASE!\e[0m"
read inputfiletype
if [ "$inputfiletype" == "Q" ]; then
        echo "Exiting this module... chicken."
        sleep 1
        pause;
        exit
elif [ "$inputfiletype" == "q" ]; then
        echo "Exiting this module... chicken."
        sleep 1
        pause;
        exit
else
	getrgbtilepath;
fi
}

does-not-exist(){
echo "The file path, or the extension you selected, does not exist."
echo ""
sleep 1
pause
exit
}

get-site-name() {
echo "The SITE NAME attribute determines which dataset we should process for $client."
echo "You should already have an idea of the site name, as it is usually in the file"
echo "name for the original TIF / JPG file."
echo ""
read -p "Please enter a site name: " 
SITENAME=$REPLY
printf "\nYou have chosen $SITENAME\n"
echo "We are now going to check that the entire directory exists....."
if [ -d "/var/www/mapproxy/data_$client/"$PROJECTYEAR"_season"$PROJECTSEASON"/$SITENAME"/ ]; then
	echo "Directory exists... continuing..."
	express-input-file-type;
else
read -p "This directory does not exist... create? " -n 1 -r
 if [[  ! $REPLY =~ ^[Yy]$ ]]; then
        printf "\nExiting....\n"
 else
        sudo mkdir -p /var/www/mapproxy/data_$client/$PROJECTYEAR_season$PROJECTSEASON/$SITENAME
        express-input-file-type;
fi
fi
}

get-season() {
echo "Please input the season.  This is a ONE DIGIT number corresponding to the time"
echo "of year that the data was flown."
echo ""
echo "I will check to make sure that the client and season directories have been created."
echo ""
read -p "Please enter the season number> " -n 1 -r
PROJECTSEASON=$REPLY
printf "\nYou have chosen season: $PROJECTSEASON\n"
read -p "Would you like to continue with this season number?" -n 1 -r
 if [[  ! $REPLY =~ ^[Yy]$ ]];
                then
        printf "\nExiting....\n"
        pause;
        exit
        else
printf  "\nTesting to see if /var/www/mapproxy/data_$client/"$PROJECTYEAR"_season"$PROJECTSEASON" exists\n"
if [ -d "/var/www/mapproxy/data_$client/"$PROJECTYEAR"_season"$PROJECTSEASON"/" ]; then
	echo "Directory exists... continuing..."
	get-site-name;
else
	read -p "Directory does not exist... create? " -n 1 -r
 if [[  ! $REPLY =~ ^[Yy]$ ]]; then
	printf "\nExiting....\n"
 else
	sudo mkdir -p /var/www/mapproxy/data_$client/$PROJECTYEAR_season$PROJECTSEASON/
	get-site-name;
fi
fi
fi
}

get-project-year() {
echo "Please input the project year.  This module assumes that the year is after 2000, so"
echo "please only enter the last two digits of the year."
echo ""
echo "Example:  15"
echo ""
read -p "Please enter the project year " -n 2 -r
PROJECTYEAR=$REPLY
printf "\nYou have specified project year $PROJECTYEAR"
echo ""
read -p "Would you like to continue with this year? " -n 1 -r
 if [[  ! $REPLY =~ ^[Yy]$ ]];
                then
        printf "\nExiting....\n"
        pause;
        exit
        else
        printf "\nContinuing with Project Year set to $PROJECTYEAR...\n"
	get-season;
fi
}

check-client-dir() {
if [ -d "/var/www/mapproxy/data_$client" ]; then
	echo ""
	echo "Directory /var/www/mapproxy/data_$client exists.  Moving on."
	get-project-year;
else
	read -p "Directory /var/www/mapproxy/data_$client does not exist.  Create it? " -n 1 -r
	if [[  ! $REPLY =~ ^[Yy]$ ]];
		then
	printf "\nExiting....\n"
	pause;
	exit
	else
	printf "\nCreating directory /var/www/mapproxy/data_$client...\n"
	sudo mkdir -p /var/www/mapproxy/data_$client
	get-project-year;
fi
fi
}


get-client() {
clear
echo "Specify the name of the client.  The client name will be appended to /var/www/mapproxy/data_client"
echo ""
echo "Example:  fn for Farm Nutrients will use or create the directory /var/www/mapproxy/data_fn"
echo ""
echo "If the directory already exists, it will be used.  If the directory does NOT exist, it will be created."
echo ""
echo -n "Please enter the client name "
read client
if [ "$inputfiletype" == "Q" ]; then
        echo "Exiting this module... chicken."
        sleep 1
        pause;
        exit
elif [ "$inputfiletype" == "q" ]; then
        echo "Exiting this module... chicken."
        sleep 1
        pause;
        exit
else
	check-client-dir;
fi
}

get-client

